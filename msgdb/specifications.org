* Possible Solutions to the Problem of Source Information Leaking
** Avoid inclusion

A simple solution would be to define a macro that would expand to a
token literal value, when compiled for release, and would expand to
the source information only when compiled in debug mode.

#if DEBUG
#define SID(file,line,func)  file ":" #line ": In " func "(): "
#else
#define SID(file,line,func)  ""
#endif

This will make it more difficult to interpret bug reports.

** Specifications of Source ID processing tool

A second solution would be to have a tool to substitute those
occurences by Source IDs that are entered in a database. So bug
reports can mention those Source IDs, and the developpers can look up
the source information from the database.


We want that the parameters passed to =SID()= (Source ID) be not
included in the object files.  Instead, they should be entered into a
database, and the =SID()= special form should be replaced by or expand
to a string containing a reference ID, a key into that database for
retrieval by the authors of the program, when reported by the users
(bug reports).

The parameters considered to this =SID()= special form can include the
following symbols:

- at macroexpansion-time:

    - =__FILE__= (string)
    - =__LINE__= (integer)
    - =__DATE__= (string)
    - =__TIME__= (string)

- at compilation-time:

    - =__func__= (string)
    - =__FUNCTION__= (string)
    - =__PRETTY_FUNCTION__= (string)

Here lies the first difficulty: =__func__= is only defined in the
compiler while compiling.  So we won't be able to perform this
processing merely at pre-processing time (macroexpansion-time).

The second difficulty is that this =SID()= macro will be typically
used in other macros, that need to be expanded so that the symbols
such as =__FILE__= and =__LINE__= are replaced by their values at the
right point in the source.

Note that =__FILE__= and =__LINE__= are determined from processing the
#line directive, in addition to the actual source file and line counting. 


This means that implementing the required functionality will involve a
(partial) pre-processor, and a (very partial) C scanner, to identify
the function names.

The actual format of source IDs will be a parameter of the tool.

Note: if the tool implement a complete C pre-processor, we can easily
allow any macro and literal (string or integer) as parameter to the
=SID()= form.

#+begin_src 
#define SID(...) /* provide a source reference ID: */"[SID:000000]"
#+end_src

Note: we call =SID()= a special form, and not a macro, because while
there's a macro defined by this name, it expansion is not used.
Instead, a special tool will process the sources to substitute the
Source ID string literal for each occurence of =SID()= calls in the
expansions of the pre-processor.

